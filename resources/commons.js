// Generated by CoffeeScript 1.6.3
(function() {
  var Animate, addClass, appendEvent, getDomIndex, hasClass, isIE, jsonp, mouseoutEvent, removeClass, traverseChildren,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Animate = (function() {
    function Animate(options) {
      var self;
      if (options == null) {
        options = {};
      }
      this.options = options;
      options.duration = options.duration || 300;
      self = this;
      self.easing = {
        swing: function(p, n, firstNum, diff) {
          return ((-Math.cos(p * Math.PI) / 2) + 0.5) * diff + firstNum;
        },
        linear: function(p, n, firstNum, diff) {
          return firstNum + diff * p;
        }
      };
    }

    Animate.prototype.start = function() {
      var options, self;
      options = this.options;
      self = this;
      self.startTime = +(new Date);
      self.interval = setInterval(function() {
        var action, complete, n, t;
        action = self.step || option.step;
        t = +(new Date);
        n = t - self.startTime;
        if (n < options.duration) {
          self.state = n / options.duration;
          self.pos = self.easing[options.easing || "swing"](self.state, n, 0, 1, options.duration);
          action(self.pos);
        } else {
          clearInterval(self.interval);
          action(1);
          complete = self.complete || options.complete;
          if (complete) {
            complete();
          }
        }
      }, 13);
    };

    Animate.prototype.stop = function() {
      var onStop, options, self;
      options = this.options;
      self = this;
      if (self.interval) {
        clearInterval(self.interval);
      }
      onStop = self.onStop || options.onStop;
      if (onStop) {
        onStop();
      }
    };

    return Animate;

  })();

  isIE = /msie/i.test(navigator.userAgent);

  traverseChildren = function(elem) {
    var children, pushAll, q;
    pushAll = function(elemArray) {
      var item, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = elemArray.length; _i < _len; _i++) {
        item = elemArray[_i];
        _results.push(q.push(item));
      }
      return _results;
    };
    children = [];
    q = [];
    q.push(elem);
    while (q.length > 0) {
      elem = q.pop();
      children.push(elem);
      pushAll(elem.children);
    }
    return children;
  };

  mouseoutEvent = function(event, dom, callback) {
    var elem, list;
    elem = event.toElement || event.relatedTarget;
    list = traverseChildren(dom);
    if (__indexOf.call(list, elem) >= 0) {
      return;
    }
    callback();
  };

  appendEvent = function(dom, event, fun) {
    if (isIE) {
      dom.attachEvent("on" + event, fun);
    } else {
      dom.addEventListener(event, fun, false);
    }
  };

  hasClass = function(ele, cls) {
    if (!ele) {
      return;
    }
    return ele.className.match(new RegExp('(\\s|^)' + cls + '(\\s|$)'));
  };

  addClass = function(ele, cls) {
    if (!ele) {
      return;
    }
    if (!hasClass(ele, cls)) {
      ele.className += " " + cls;
    }
  };

  removeClass = function(ele, cls) {
    var reg;
    if (!ele) {
      return;
    }
    if (hasClass(ele, cls)) {
      reg = new RegExp('(\\s|^)' + cls + '(\\s|$)');
      ele.className = ele.className.replace(reg, ' ');
    }
  };

  getDomIndex = function(e) {
    var i;
    i = 0;
    while (e.previousSibling) {
      e = e.previousSibling;
      if (e.nodeType === 1) {
        i = i + 1;
      }
    }
    return i;
  };

  jsonp = function(url) {
    var callbackChain, data, methodName, script, _href;
    _href = window.location.href;
    if (_href.indexOf('https://') === 0) {
      url = url.replace('http://', 'https://');
    }
    methodName = 'jsonp' + Math.random().toString(36).substring(2);
    data = null;
    callbackChain = [];
    window[methodName] = function(callbackData) {
      var m, _i, _len;
      data = callbackData;
      for (_i = 0, _len = callbackChain.length; _i < _len; _i++) {
        m = callbackChain[_i];
        m(data);
      }
    };
    url = url.replace('callback=?', 'callback=' + methodName);
    script = document.createElement('script');
    script.setAttribute('src', url);
    script.setAttribute('charset', "utf-8");
    document.getElementsByTagName('head')[0].appendChild(script);
    return {
      done: function(fun) {
        if (data) {
          fun(data);
        }
        callbackChain.push(fun);
      }
    };
  };

  window.Animate = Animate;

  window.isIE = isIE;

  window.traverseChildren = traverseChildren;

  window.mouseoutEvent = mouseoutEvent;

  window.appendEvent = appendEvent;

  window.hasClass = hasClass;

  window.addClass = addClass;

  window.removeClass = removeClass;

  window.getDomIndex = getDomIndex;

  window.jsonp = jsonp;

}).call(this);
